import numpy as np
from tabulate import tabulate
# H√†m gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh tuy·∫øn t√≠nh b·∫±ng ph∆∞∆°ng ph√°p Gauss-Jordan
def solve_gauss_jordan(A, b, c):
    n = len(A)
    augmented_matrix = np.concatenate((A, b.reshape(n, 1)), axis=1)

    for i in range(n):
        # T√¨m pivot trong c·ªôt hi·ªán t·∫°i
        pivot_row = i
        for j in range(i+1, n):
            if abs(augmented_matrix[j, i]) > abs(augmented_matrix[pivot_row, i]):
                pivot_row = j

        # Ho√°n ƒë·ªïi h√†ng pivot
        augmented_matrix[[i, pivot_row]] = augmented_matrix[[pivot_row, i]]

        # Chia h√†ng pivot cho pivot ƒë·ªÉ ƒë∆∞a pivot v·ªÅ gi√° tr·ªã 1
        pivot = augmented_matrix[i, i]
        augmented_matrix[i] /= pivot

        # Lo·∫°i b·ªè c√°c ·∫©n s·ªë kh√°c h√†ng pivot
        for j in range(n):
            if j != i:
                factor = augmented_matrix[j, i]
                augmented_matrix[j] -= factor * augmented_matrix[i]

        if c:
            print("Ph√©p bi·∫øn ƒë·ªïi l·∫ßn th·ª© ", i + 1 )
            A_loop = augmented_matrix[:, :-1]
            B_loop = augmented_matrix[:, -1]
            print(tabulate(np.round(augmented_matrix, 6), tablefmt="grid"))

    # Tr√≠ch xu·∫•t ma tr·∫≠n h·ªá s·ªë v√† ma tr·∫≠n t·ª± do t·ª´ ma tr·∫≠n m·ªü r·ªông
    A = augmented_matrix[:, :-1]
    b = augmented_matrix[:, -1]

    return A, b

# H√†m ƒë·ªçc ma tr·∫≠n m·ªü r·ªông t·ª´ file
def read_augmented_matrix_from_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
        rows = len(lines)
        cols = len(lines[0].split()) - 1  # Tr·ª´ 1 c·ªôt cu·ªëi c√πng l√† c·ªôt t·ª± do
        matrix = np.zeros((rows, cols))
        b = np.zeros(rows)
        for i in range(rows):
            line_values = [float(x) for x in lines[i].split()]
            matrix[i] = line_values[:-1]
            b[i] = line_values[-1]
        return matrix, b

# ƒê∆∞·ªùng d·∫´n t·ªõi file ch·ª©a ma tr·∫≠n m·ªü r·ªông
filename = "augmented_matrix.txt"

# ƒê·ªçc ma tr·∫≠n m·ªü r·ªông t·ª´ file
A, b = read_augmented_matrix_from_file(filename)

# Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh b·∫±ng ph∆∞∆°ng ph√°p Gauss-Jordan
A, b = solve_gauss_jordan(A, b, True)

# In ma tr·∫≠n h·ªá s·ªë sau khi √°p d·ª•ng ph∆∞∆°ng ph√°p Gauss-Jordan
print("\nüîπ Ma tr·∫≠n h·ªá s·ªë sau Gauss-Jordan:")
print(tabulate(np.round(A, 6), tablefmt="grid"))
# In ma tr·∫≠n t·ª± do sau khi √°p d·ª•ng ph∆∞∆°ng ph√°p Gauss-Jordan
print("\nüîπ Ma tr·∫≠n t·ª± do sau Gauss-Jordan:")
print(tabulate(np.round(b.reshape(-1, 1), 6), tablefmt="grid"))

# T√≠nh rank c·ªßa ma tr·∫≠n h·ªá s·ªë
rank_A = np.linalg.matrix_rank(A)

# T√≠nh rank c·ªßa ma tr·∫≠n m·ªü r·ªông b·∫≠c thang
rank_augmented_matrix = np.linalg.matrix_rank(np.concatenate((A, b.reshape(len(b), 1)), axis=1))

# In ra rank c·ªßa ma tr·∫≠n h·ªá s·ªë v√† ma tr·∫≠n m·ªü r·ªông
print(f"\nüîπ Rank c·ªßa ma tr·∫≠n h·ªá s·ªë: {rank_A}")
print(f"üîπ Rank c·ªßa ma tr·∫≠n m·ªü r·ªông: {rank_augmented_matrix}")
# Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh b·∫±ng ph∆∞∆°ng ph√°p Gauss-Jordan
A, b = solve_gauss_jordan(A, b, False)

# In nghi·ªám c·ªßa h·ªá ph∆∞∆°ng tr√¨nh
print("\nüîπ Nghi·ªám c·ªßa h·ªá ph∆∞∆°ng tr√¨nh:")
for i in range(len(b)):
    print(f"  x{i+1} = {b[i]:.6f}")

